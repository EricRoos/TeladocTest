I"(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.ProductSelector = (function(superClass) {
    extend(ProductSelector, superClass);

    function ProductSelector() {
      return ProductSelector.__super__.constructor.apply(this, arguments);
    }

    ProductSelector.prototype.handleQuantityUpdate = function(ev) {
      return this.props.notify({
        id: this.props.product.id,
        quantity: ev.target.value
      });
    };

    ProductSelector.prototype.render = function() {
      var disabled, product;
      product = this.props.product;
      disabled = product.stock_value === 0;
      return <div className='product'>
      <label>{product.name} ({product.stock_value}) </label>
      <input type='hidden' name='productId' value={product.id} />
      <input type='number' min={0} max={product.stock_value} name='quantity' disabled={disabled} onChange={this.handleQuantityUpdate.bind(this)} />
    </div>;
    };

    return ProductSelector;

  })(React.Component);

}).call(this);
:ET